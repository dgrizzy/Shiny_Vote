stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData %<>% filter(str_detect(voteData[["X1"]], "Trump|Clinton"))
voteData$X2 <- str_extract_all(voteData$X2, "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[["X1"]], "Trump")
clintonIndex <- str_which(voteData[["X1"]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanRow(node)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
library(readxl)
demographicsData <- read_excel("poupByAge.xls")
stateNames <- demographicsData$STATE[!is.na(demographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
demographicsData$STATE <- correctStateNames
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Reg = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Reg = round(Total_Voted / Regestered_Voters* 100, digits =2))
#write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData %<>% filter(str_detect(voteData[["X1"]], "Trump|Clinton"))
voteData$X2 <- str_extract_all(voteData$X2, "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[["X1"]], "Trump")
clintonIndex <- str_which(voteData[["X1"]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanedData <- list()
for (row in webpage) {
ourResult <- cleanRow(row)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
library(readxl)
demographicsData <- read_excel("poupByAge.xls")
stateNames <- demographicsData$STATE[!is.na(demographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
demographicsData$STATE <- correctStateNames
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Reg = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Reg = round(Total_Voted / Regestered_Voters* 100, digits =2))
#write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  filter(voteData, str_detect(voteData[["X1"]], "Trump|Clinton"))
voteData$X2 <- str_extract_all(voteData$X2, "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[["X1"]], "Trump")
clintonIndex <- str_which(voteData[["X1"]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanedData <- list()
for (row in webpage) {
ourResult <- cleanRow(row)
}
str_detect(voteData[["X1"]], "Trump|Clinton")
node <- webpage[1]
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  filter(voteData, str_detect(voteData[["X1"]], "Trump|Clinton"))
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  filter(voteData, str_detect(voteData[["X1"]], "Trump|Clinton"))
voteData$X2 <- str_extract_all(voteData$X2, "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[["X1"]], "Trump")
clintonIndex <- str_which(voteData[["X1"]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
for (row in webpage) {
ourResult <- cleanRow(row)
}
str_detect(voteData[["X1"]], "Trump|Clinton")
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  voteData[str_detect(voteData[["X1"]], "Trump|Clinton"),]
voteData$X2 <- str_extract_all(voteData$X2, "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[["X1"]], "Trump")
clintonIndex <- str_which(voteData[["X1"]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanedData <- list()
cleanedData[[ourResult$stateName]] <- ourResult
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
voteData[["X1"]]
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  voteData[str_detect(voteData[["X1"]], "Trump|Clinton"),]
voteData$X2 <- str_extract_all(voteData$X2, "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[["X1"]], "Trump")
clintonIndex <- str_which(voteData[["X1"]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
node <- voteData[[2]]
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  voteData[str_detect(voteData[[1]], "Trump|Clinton"),]
voteData[[2]] <- str_extract_all(voteData[[2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[1]], "Trump")
clintonIndex <- str_which(voteData[[1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  voteData[str_detect(voteData[[,1]], "Trump|Clinton"),]
voteData[[,2]] <- str_extract_all(voteData[[,2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[,1]], "Trump")
clintonIndex <- str_which(voteData[[,1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
library(readxl)
demographicsData <- read_excel("poupByAge.xls")
stateNames <- demographicsData$STATE[!is.na(demographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
demographicsData$STATE <- correctStateNames
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Reg = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Reg = round(Total_Voted / Regestered_Voters* 100, digits =2))
#write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  voteData[str_detect(voteData[[,1]], "Trump|Clinton"),]
voteData[[,2]] <- str_extract_all(voteData[[,2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[,1]], "Trump")
clintonIndex <- str_which(voteData[[,1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanedData <- list()
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
---
title: "Vote Shiny"
author: "David Griswold"
date: "7/25/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Load Libraries
```{r}
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
library(readxl)
```
# Cencus Data
## Read Data
```{r}
demographicsData <- read_excel("poupByAge.xls")
```
## Create New Name Vector
```{r}
stateNames <- demographicsData$STATE[!is.na(demographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
demographicsData$STATE <- correctStateNames
rm(i, correctStateNames, stateNames)
```
## Filter Our Data
```{r}
demographicsData %<>% filter(Age == "18 to 24")
```
## Delete Unecessary Columns
```{r}
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
```
## Type Conversions
```{r}
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
```
# Varible Manipulation
```{r}
demographicsData %<>% mutate(Percent_Reg = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Reg = round(Total_Voted / Regestered_Voters* 100, digits =2))
```
# Write Out
```{r}
#write_csv(demographicsData, "demographicsData.csv")
```
# Scraping Voting Results
## Pull in Webpage Data
```{r}
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
node <- webpage[53]
node <- webpage[44]
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
View(voteData)
voteData <-  voteData[str_detect(voteData[[,1]], "Trump|Clinton"),]
voteData <-  voteData[str_detect(voteData[[1]], "Trump|Clinton"),]
voteData[[2]] <- str_extract_all(voteData[[2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[1]], "Trump")
clintonIndex <- str_which(voteData[[1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
voteData <-  voteData[str_detect(voteData[[1]], "Trump|Clinton"),]
voteData[[2]] <- str_extract_all(voteData[[2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[1]], "Trump")
clintonIndex <- str_which(voteData[[1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
filter <- str_detect(voteData[[1]], "Trump|Clinton")
voteData <-  voteData[filter, ]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
library(readxl)
demographicsData <- read_excel("poupByAge.xls")
stateNames <- demographicsData$STATE[!is.na(demographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
demographicsData$STATE <- correctStateNames
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Reg = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Reg = round(Total_Voted / Regestered_Voters* 100, digits =2))
#write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
filter <- str_detect(voteData[[1]], "Trump|Clinton")
voteData <-  voteData[filter, ]
voteData[[2]] <- str_extract_all(voteData[[2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[1]], "Trump")
clintonIndex <- str_which(voteData[[1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanedData <- list()
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
dim(voteData)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
library(readxl)
demographicsData <- read_excel("poupByAge.xls")
stateNames <- demographicsData$STATE[!is.na(demographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
demographicsData$STATE <- correctStateNames
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Reg = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Reg = round(Total_Voted / Regestered_Voters* 100, digits =2))
#write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
filter <- str_detect(voteData[[1]], "Trump|Clinton")
voteData <-  voteData[filter, ]
dim(voteData)
voteData[[2]] <- str_extract_all(voteData[[2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[1]], "Trump")
clintonIndex <- str_which(voteData[[1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanedData <- list()
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
library(readxl)
demographicsData <- read_excel("poupByAge.xls")
stateNames <- demographicsData$STATE[!is.na(demographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
demographicsData$STATE <- correctStateNames
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Reg = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Reg = round(Total_Voted / Regestered_Voters* 100, digits =2))
#write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateCode <- node %>% html_attr("id") %>% str_extract("(?<=state)..")
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE) %>% .[[1]]
print(dim(voteData))
print(typeof(voteData))
filter <- str_detect(voteData[[1]], "Trump|Clinton")
voteData <-  voteData[filter, ]
voteData[[2]] <- str_extract_all(voteData[[2]], "[0-9\\.]{3}[^%]")
trumpIndex <- str_which(voteData[[1]], "Trump")
clintonIndex <- str_which(voteData[[1]], "Clinton")
resultingDf <- data.frame("stateName" = stateName,
"TrumpVotes" = voteData[[trumpIndex, 3]],
"ClintonVotes" = voteData[[clintonIndex, 3]],
"TrumpPercent" = voteData[[trumpIndex, 2]],
"ClintonPercent" = voteData[[clintonIndex, 2]])
return(resultingDf)
}
cleanedData <- list()
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult$stateName]] <- ourResult
}
for (row in webpage) {
ourResult <- cleanRow(row)
cleanedData[[ourResult[1,1]]] <- ourResult
}
for (row in webpage) {
print(row)
#ourResult <- cleanRow(row)
#cleanedData[[ourResult[1,1]]] <- ourResult
}
View(row)
row
