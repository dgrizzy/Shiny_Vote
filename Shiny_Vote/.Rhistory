direction = "auto"
)
)
ourPlot
stateLabels <-
paste0(
"<strong>",
electionData$State,
"<strong/>",
"<br/> <sup>Vote Margin: ",
electionData$Margin,
"<sup/>",
"<br/> <sup>Participation: ",
electionData$Percent_Voting_Poup,
"%<sup/>") %>% lapply(htmltools::HTML)
mapboxToken <- "pk.eyJ1IjoiZGF2aWRncmlzd29sZCIsImEiOiJjamswYzRmZ24wNTlpM2tsbHF5cXV5djVuIn0.-UfCrx2It8OGax9NS3mdIA"
# Start Actual Leaflet
ourPlot <- leaflet() %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox",
options = providerTileOptions(id = "mapbox.light",
accessToken = mapboxToken)) %>%
addPolygons(
data = geoJsonData,
fillColor = ~ pallet(electionData$GenZ_Power),
weight = 2,
opacity = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
fillOpacity = 0.4,
bringToFront = TRUE
),
label = stateLabels,
labelOptions = labelOptions(
style = list(
"font-weight" = "normal",
margin = "0px 0px",
padding = "1px 1px"
),
textsize = "15px",
direction = "auto"
)
)
ourPlot
"<strong>",
electionData$State,
"<strong/>",
"<br/> <sup>Vote Margin: ",
electionData$Margin,
"%<sup/>",
"<br/> <sup>Participation: ",
electionData$Percent_Voting_Poup,
"%<sup/>") %>% lapply(htmltools::HTML)
mapboxToken <- "pk.eyJ1IjoiZGF2aWRncmlzd29sZCIsImEiOiJjamswYzRmZ24wNTlpM2tsbHF5cXV5djVuIn0.-UfCrx2It8OGax9NS3mdIA"
# Start Actual Leaflet
ourPlot <- leaflet() %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox",
options = providerTileOptions(id = "mapbox.light",
accessToken = mapboxToken)) %>%
addPolygons(
data = geoJsonData,
fillColor = ~ pallet(electionData$GenZ_Power),
weight = 2,
opacity = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
fillOpacity = 0.4,
bringToFront = TRUE
),
label = stateLabels,
labelOptions = labelOptions(
style = list(
"font-weight" = "normal",
margin = "0px 0px",
padding = "1px 1px"
),
textsize = "15px",
direction = "auto"
)
)
ourPlot
# Add Margin
overallDataset <- overallDataset %>%
mutate(Margin = round(trumpPercent - clintonPercent,2),
GenZ_Power = abs(Margin) * Percent_Voting_Poup)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
rawdemographicsData <- read_excel("poupByAge.xls")
stateNames <- rawdemographicsData$STATE[!is.na(rawdemographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
rawdemographicsData$STATE <- correctStateNames
demographicsData <- rawdemographicsData
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Regest = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Regest = round(Total_Voted / Regestered_Voters* 100, digits =2),
Num_Not_Voting = round(Poupulation * (Percent_Voting_Poup / 100)))
nationalData <- demographicsData[demographicsData$State == "Us",]
demographicsData <- demographicsData[!demographicsData$State == "Us",]
write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE)
return(list(state = stateName, data = voteData))
}
cleanedData <- map(webpage, function (x) cleanRow(x))
State <- map_chr(cleanedData, function(x) x$state)
clintonVotes <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Clinton")
return(ourData$X3[index])
})
trumpVotes <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Trump")
return(ourData$X3[index])
})
clintonPercent <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Clinton")
return(ourData$X2[index])
})
trumpPercent <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Trump")
return(ourData$X2[index])
})
voteData <- data.frame(State,
clintonVotes,
trumpVotes,
clintonPercent,
trumpPercent)
voteData$clintonVotes %<>% str_replace_all(",", "") %>% as.numeric()
voteData$trumpVotes %<>% str_replace_all(",", "") %>% as.numeric()
voteData$clintonPercent %<>% str_replace_all("%", "") %>% as.numeric()
voteData$trumpPercent %<>% str_replace_all("%", "") %>% as.numeric()
voteData$State %<>% as.character() %>% str_to_title()
write_csv(voteData, "PresVotesByState2016.csv")
overallDataset <- inner_join(voteData, demographicsData, by = "State") %>%
rbind(c("Puerto Rico",rep(0, 10))) # Adding a row for Puerto Rico
states <- select(overallDataset, State)
overallDataset <- bind_cols(states, map_df(overallDataset[,2:ncol(overallDataset)], as.numeric))
# Add Margin
overallDataset <- overallDataset %>%
mutate(Margin = round(trumpPercent - clintonPercent,2),
GenZ_Power = abs(Margin) * Percent_Voting_Poup)
write_csv(overallDataset, file.path("Shiny_Vote", "VoteAndYouthTurnoutData2016.csv"))
runApp()
# Load Data
electionData <- read_csv("VoteAndYouthTurnoutData2016.csv")
geoJsonData <- geojson_read("statesData.json", what = "sp")
# Source Functions
source("leafletFunction.R")
# Change Types
states <- select(electionData, State)
electionData <- bind_cols(states, map_df(electionData[,2:ncol(electionData)], as.numeric))
# Change Caps
geoJsonData$NAME %<>% str_to_title()
# Order the Titles Properly
electionData <- electionData[order(match(electionData$State, geoJsonData$NAME)), ]
#________________Start Server Logic________________
shinyServer(function(input, output) {
#________________Plot Leaflet________________
output$mainLeaflet <- renderLeaflet({
if (input$layerRequested == "Trump Margin") {
plotPresLeaflet()
} else if (input$layerRequested == "Youth Participation") {
plotParticLeaflet()
} else {
genZPowerLeaflet()
}
})
#________________Create UI Element For States________________
output$StateChoices <- renderUI({
selectInput(inputId = "StateInput",
label = "Choose Focus State:",
multiple = FALSE,
choices = sort(electionData$State))})
}) #SERVER END BRACKET
bins <- c(0, 0.04, 0.08, 0.12, 0.2)
pallet <-
colorBin(
brewer.pal(3, name = "Greens"),
domain = electionData$State,
bins = bins
)
stateLabels <-
paste0(
"<strong>",
electionData$State,
"<strong/>",
"<br/> <sup>Vote Margin: ",
electionData$Margin,
"%<sup/>",
"<br/> <sup>Participation: ",
electionData$Percent_Voting_Poup,
"%<sup/>") %>% lapply(htmltools::HTML)
mapboxToken <- "pk.eyJ1IjoiZGF2aWRncmlzd29sZCIsImEiOiJjamswYzRmZ24wNTlpM2tsbHF5cXV5djVuIn0.-UfCrx2It8OGax9NS3mdIA"
# Start Actual Leaflet
ourPlot <- leaflet() %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox",
options = providerTileOptions(id = "mapbox.light",
accessToken = mapboxToken)) %>%
addPolygons(
data = geoJsonData,
fillColor = ~ pallet(electionData$GenZ_Power),
weight = 2,
opacity = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
fillOpacity = 0.4,
bringToFront = TRUE
),
label = stateLabels,
labelOptions = labelOptions(
style = list(
"font-weight" = "normal",
margin = "0px 0px",
padding = "1px 1px"
),
textsize = "15px",
direction = "auto"
)
)
ourPlot
qplot(electionData$GenZ_Power)
mean(electionData$GenZ_Power)
sd(electionData$GenZ_Power)
electionData$GenZ_Power
bins <- c(0,200, 400, 600,800, 1000, 1200,1400, 1600, 1800, 2000)
pallet <-
colorBin(
brewer.pal(3, name = "Greens"),
domain = electionData$State,
bins = bins,
reverse = TRUE
)
stateLabels <-
paste0(
"<strong>",
electionData$State,
"<strong/>",
"<br/> <sup>Vote Margin: ",
electionData$Margin,
"%<sup/>",
"<br/> <sup>Participation: ",
electionData$Percent_Voting_Poup,
"%<sup/>") %>% lapply(htmltools::HTML)
mapboxToken <- "pk.eyJ1IjoiZGF2aWRncmlzd29sZCIsImEiOiJjamswYzRmZ24wNTlpM2tsbHF5cXV5djVuIn0.-UfCrx2It8OGax9NS3mdIA"
# Start Actual Leaflet
ourPlot <- leaflet() %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox",
options = providerTileOptions(id = "mapbox.light",
accessToken = mapboxToken)) %>%
addPolygons(
data = geoJsonData,
fillColor = ~ pallet(electionData$GenZ_Power),
weight = 2,
opacity = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
fillOpacity = 0.4,
bringToFront = TRUE
),
label = stateLabels,
labelOptions = labelOptions(
style = list(
"font-weight" = "normal",
margin = "0px 0px",
padding = "1px 1px"
),
textsize = "15px",
direction = "auto"
)
)
ourPlot
runApp()
runApp()
runApp()
runApp()
runApp()
library(DT)
install.packages("DT")
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stateData <- filter(electionData, State == input$StateInput)
runApp()
runApp()
runApp()
#Change Back to State Input
state <- "Alabama"
stateData <- filter(electionData, State == state)
View(stateData)
paste0("The state of ", state, "went to ",
whoWon,
"by", abs(stateData$Margin),"%. ",
"However, only", stateData$Percent_Voting_Poup, "% of ages 18-24 voted. "
)
whoWon <- ifelse(stateData$Margin > 0, "Donald Trump ", "Hillary Clinton ")
paste0("The state of ", state, "went to ",
whoWon,
"by", abs(stateData$Margin),"%. ",
"However, only", stateData$Percent_Voting_Poup, "% of ages 18-24 voted. "
)
paste0("The state of ", state, "went to ",
whoWon,
"by ", abs(stateData$Margin),"%. ",
"However, only ", stateData$Percent_Voting_Poup, "% of ages 18-24 voted. "
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(rvest)
library(magrittr)
rawdemographicsData <- read_excel("poupByAge.xls")
stateNames <- rawdemographicsData$STATE[!is.na(rawdemographicsData$STATE)]
correctStateNames <- c()
for (i in stateNames){
correctStateNames <- c(correctStateNames, rep(i, 6))
}
rawdemographicsData$STATE <- correctStateNames
demographicsData <- rawdemographicsData
rm(i, correctStateNames, stateNames)
demographicsData %<>% filter(Age == "18 to 24")
demographicsData %<>% select(c("STATE", "Total Citizen Population", "Total registered", "Total voted"))
names(demographicsData) <- c("State", "Poupulation", "Regestered_Voters", "Total_Voted")
# Types good to go, will lowercase the state names
demographicsData$State %<>% str_to_title()
demographicsData %<>% mutate(Percent_Regest = round(Regestered_Voters / Poupulation * 100, digits =2),
Percent_Voting_Poup = round(Total_Voted / Poupulation * 100, digits =2),
Percent_Voting_Regest = round(Total_Voted / Regestered_Voters* 100, digits =2),
Num_Not_Voting = round(Poupulation * (1 - Percent_Voting_Poup / 100)))
nationalData <- demographicsData[demographicsData$State == "Us",]
demographicsData <- demographicsData[!demographicsData$State == "Us",]
write_csv(demographicsData, "demographicsData.csv")
base_url <- "https://www.politico.com/mapdata-2016/2016-election/results/map/president/"
ourElements <- ".timeline-group"
webpage <- read_html(base_url) %>% html_nodes(ourElements)
cleanRow <- function (node) {
stateName <- node %>% html_nodes(".timeline-header") %>% html_text() %>% str_trim()
voteData <- node %>% html_node(".results-table") %>% html_table(fill = TRUE)
return(list(state = stateName, data = voteData))
}
cleanedData <- map(webpage, function (x) cleanRow(x))
State <- map_chr(cleanedData, function(x) x$state)
clintonVotes <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Clinton")
return(ourData$X3[index])
})
trumpVotes <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Trump")
return(ourData$X3[index])
})
clintonPercent <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Clinton")
return(ourData$X2[index])
})
trumpPercent <- map_chr(cleanedData, function(x) {
ourData <- x$data
index <- str_which(ourData$X1, "Trump")
return(ourData$X2[index])
})
voteData <- data.frame(State,
clintonVotes,
trumpVotes,
clintonPercent,
trumpPercent)
voteData$clintonVotes %<>% str_replace_all(",", "") %>% as.numeric()
voteData$trumpVotes %<>% str_replace_all(",", "") %>% as.numeric()
voteData$clintonPercent %<>% str_replace_all("%", "") %>% as.numeric()
voteData$trumpPercent %<>% str_replace_all("%", "") %>% as.numeric()
voteData$State %<>% as.character() %>% str_to_title()
write_csv(voteData, "PresVotesByState2016.csv")
overallDataset <- inner_join(voteData, demographicsData, by = "State") %>%
rbind(c("Puerto Rico",rep(0, 10))) # Adding a row for Puerto Rico
states <- select(overallDataset, State)
overallDataset <- bind_cols(states, map_df(overallDataset[,2:ncol(overallDataset)], as.numeric))
# Add Margin
overallDataset <- overallDataset %>%
mutate(Margin = round(trumpPercent - clintonPercent,2),
GenZ_Power = abs(Margin) * Percent_Voting_Poup)
write_csv(overallDataset, file.path("Shiny_Vote", "VoteAndYouthTurnoutData2016.csv"))
# Load Data
electionData <- read_csv("VoteAndYouthTurnoutData2016.csv")
geoJsonData <- geojson_read("statesData.json", what = "sp")
# Source Functions
source("leafletFunction.R")
source(uxFunctions.R)
# Change Types
states <- select(electionData, State)
electionData <- bind_cols(states, map_df(electionData[,2:ncol(electionData)], as.numeric))
# Change Caps
geoJsonData$NAME %<>% str_to_title()
# Order the Titles Properly
electionData <- electionData[order(match(electionData$State, geoJsonData$NAME)), ]
library(DT)
#Change Back to State Input
state <- "Alabama"
stateData <- filter(electionData, State == state)
whoWon <- ifelse(stateData$Margin > 0, "Donald Trump ", "Hillary Clinton ")
howManyNoVote <- stateData$Num_Not_Voting * 1000
marginInNumber <- abs(stateData$Margin) * (stateData$clintonVotes + stateData$trumpVotes)
paste0("The state of ", state, "went to ",
whoWon,
"by ", abs(stateData$Margin),"%. ",
"However, only ", stateData$Percent_Voting_Poup, "% of ages 18-24 voted. ",
canWeFlip,
"In fact, if each of your freinds have the same number that you do, it would only take ",
numberOfNetworks,
" of these to make political changes in this state."
)
canWeFlip <- ifelse(howManyNoVote > marginInNumber,
"there are enough young people here to flip the state alone. ", "We need to connect with non-gen Z people to win here. ")
paste0("The state of ", state, "went to ",
whoWon,
"by ", abs(stateData$Margin),"%. ",
"However, only ", stateData$Percent_Voting_Poup, "% of ages 18-24 voted. ",
canWeFlip,
"In fact, if each of your freinds have the same number that you do, it would only take ",
numberOfNetworks,
" of these to make political changes in this state."
)
marginInNumber <- abs(stateData$Margin) * (stateData$clintonVotes + stateData$trumpVotes)
network <- 5^2 # input$Freinds^2
numberOfNetworks <- marginInNumber / network
canWeFlip <- ifelse(howManyNoVote > marginInNumber,
"there are enough young people here to flip the state alone. ", "We need to connect with non-gen Z people to win here. ")
paste0("The state of ", state, "went to ",
whoWon,
"by ", abs(stateData$Margin),"%. ",
"However, only ", stateData$Percent_Voting_Poup, "% of ages 18-24 voted. ",
canWeFlip,
"In fact, if each of your freinds have the same number that you do, it would only take ",
numberOfNetworks,
" of these to make political changes in this state."
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0("The state of ", state, " went to ",
whoWon,
"by ", abs(stateData$Margin),"%. ",
"However, only ", stateData$Percent_Voting_Poup, "% of ages 18-24 voted. ",
canWeFlip,
"In fact, if each of your freinds have the same number that you do, it would only take ",
numberOfNetworks,
" of these to make political changes in ",
stateData$State, "."
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
numberOfNetworks <- round(marginInNumber / network)
runApp()
runApp()
runApp()
print(electionData)
runApp()
runApp()
runApp()
runApp()
runApp()
